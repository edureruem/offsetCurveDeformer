// ========================================
// outputArrayValue 사용 플러그인 테스트
// ========================================

print("=== outputArrayValue 사용 플러그인 테스트 ===");

// 1. 새 씬 생성
print("\n1단계: 새 씬 생성");
file -newFile -force;

// 2. 플러그인 로드
print("\n2단계: 플러그인 로드");
if(`pluginInfo -query -loaded "offsetCurveDeformer"`) {
    print("✅ 플러그인이 이미 로드됨");
} else {
    loadPlugin "offsetCurveDeformer.mll";
    print("✅ 플러그인 로드 성공");
}

// 3. 테스트 지오메트리 생성
print("\n3단계: 테스트 지오메트리 생성");
polyCylinder -radius 1 -height 3 -subdivisionsX 8 -subdivisionsY 1 -subdivisionsZ 3;
string $cylinder = `ls -selection`;
print("실린더 생성: " + $cylinder[0]);

// 4. 테스트 곡선 생성
print("\n4단계: 테스트 곡선 생성");
curve -p 0 0 0 -p 1 1 0 -p 2 0 0 -p 3 -1 0 -p 4 0 0 -k 0 -k 0 -k 0 -k 1 -k 2 -k 2 -k 2;
string $curve = `ls -selection`;
print("곡선 생성: " + $curve[0]);

// 5. 디포머 노드 생성
print("\n5단계: 디포머 노드 생성");
deformer -type "offsetCurveDeformer" $cylinder[0];
string $deformer = `ls -type "offsetCurveDeformer"`;
print("디포머 노드 생성: " + $deformer[0]);

// 6. influenceCurve 연결
print("\n6단계: influenceCurve 연결");
print("연결 시도: " + $curve[0] + ".worldSpace[0] -> " + $deformer[0] + ".influenceCurve[0].influenceCurveData");
connectAttr ($curve[0] + ".worldSpace[0]") ($deformer[0] + ".influenceCurve[0].influenceCurveData");

// 7. 연결 상태 확인
print("\n7단계: 연결 상태 확인");
string $connections[] = `listConnections ($deformer[0] + ".influenceCurve[0].influenceCurveData")`;
if(size($connections) > 0) {
    print("✅ 연결 성공: " + $connections[0]);
} else {
    print("❌ 연결 실패");
}

// 8. 디포머 실행 (deform() 메서드 호출)
print("\n8단계: 디포머 실행");
print("디포머를 실행하여 getInfluenceCurve() 메서드 호출");
print("outputArrayValue 사용으로 cached 값에 직접 접근하는지 확인");

// 9. 디버그 정보 출력
print("\n9단계: 디버그 정보");
print("이제 디포머가 실행되면 getInfluenceCurve() 메서드의 상세 로그를 확인할 수 있습니다.");
print("outputArrayValue 사용으로 인한 성능 향상과 cached 값 접근을 확인하세요.");

print("\n=== 테스트 완료 ===");
print("디포머를 조작하거나 씬을 업데이트하여 deform() 메서드를 호출하세요.");
